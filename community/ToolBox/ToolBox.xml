<?xml version="1.0" encoding="UTF-8"?>
<configuration>
	<formatVersion>5</formatVersion>
	<nxslVersionV5>true</nxslVersionV5>
	<server>
		<version>5.0.0-rc679</version>
		<buildTag>5.0-679-g8755f36643</buildTag>
		<operatingSystem>Linux 6.8.0-31-generic</operatingSystem>
	</server>
	<description>ToolBox script</description>
	<events>
	</events>
	<templates>
	</templates>
	<traps>
	</traps>
	<rules>
	</rules>
	<scripts>
		<script id="10070">
			<guid>ae1de6cc-5a08-4263-9606-062b6fe53002</guid>
			<name>ToolBox</name>
			<code>/**&#x0A; * Get table form agent ant print it using println()&#x0A; */&#x0A;function printAgentTable(node, tableName)&#x0A;{&#x0A;&#x09;// Read table data from agent&#x0A;   table = node.readAgentTable(tableName);&#x0A;   if (table == null)&#x0A;   {&#x0A;         println(&quot;ERROR: Cannot read table from agent&quot;);&#x0A;         return;&#x0A;   }&#x0A;&#x0A;   // Print column names&#x0A;   for(i = 0; i &lt; table.columnCount; i++)&#x0A;         print(&quot;| &quot; .. table.getColumnName(i).left(20));&#x0A;   println(&quot;|&quot;);&#x0A;   for(i = 0; i &lt; table.columnCount; i++)&#x0A;         print(&quot;+&quot; .. &quot;-&quot;.left(21, &quot;-&quot;));&#x0A;   println(&quot;+&quot;);&#x0A;&#x0A;   // Print data&#x0A;   for(i = 0; i &lt; table.rowCount; i++)&#x0A;   {&#x0A;         for(j = 0; j &lt; table.columnCount; j++)&#x0A;         {&#x0A;                  print(&quot;| &quot; .. table.get(i, j).left(20));&#x0A;         }&#x0A;         println(&quot;|&quot;);&#x0A;   }&#x0A;}&#x0A;&#x0A;/**&#x0A; * Get SNMP metric as a string. Function will return obtained value or null if failed to create transport&#x0A; */&#x0A;function readSNMPMetric(node, oid)&#x0A;{&#x0A;&#x09;transport = node.createSNMPTransport();    // Create SNMP transport for node&#x0A;   if (transport == null)&#x0A;   {&#x0A;      println(&quot;Failed to create SNMP transport, exit&quot;);&#x0A;      return null;&#x0A;   }&#x0A;   value = transport.getValue(oid);&#x0A;   return value;&#x0A;}&#x0A;&#x0A;/**&#x0A; * rint meta information about object like class name, class hierarchy, methods and attributes&#x0A; */&#x0A;function info(object)&#x0A;{&#x0A;&#x09;c = object.__class;&#x0A;&#x09;println(&quot;&quot;);&#x0A;&#x09;println(c.name);&#x0A;&#x09;println(&quot;   &quot; .. c.hierarchy.join(&quot; :: &quot;));&#x0A;&#x09;println(&quot;   Methods:&quot;);&#x0A;&#x09;for(m : c.methods)&#x0A;  &#x09;&#x09;println(&quot;      &quot; .. m);&#x0A;&#x09;println(&quot;   Attributes:&quot;);&#x0A;&#x09;for(a : c.attributes)&#x0A;   &#x09;&#x09;println(&quot;      &quot; .. a);&#x0A;}&#x0A;&#x0A;/**&#x0A; * Print all possible NXSL meta information (all classes, their methods and atgtributes, and functions)&#x0A; */&#x0A;function NXSLInfo()&#x0A;{&#x0A;&#x09;println(&quot;==== Functions ====&quot;);&#x0A;&#x09;for(f : NXSL::Functions)&#x0A;   &#x09;&#x09;println(f);&#x0A;&#x09;println(&quot;&quot;);&#x0A;&#x09;println(&quot;==== Classes ====&quot;);&#x0A;&#x09;for(c : NXSL::Classes)&#x0A;&#x09;{&#x0A;&#x09;&#x09;println(&quot;&quot;);&#x0A;   &#x09;&#x09;println(c.name);&#x0A;   &#x09;&#x09;println(&quot;   &quot; .. c.hierarchy.join(&quot; :: &quot;));&#x0A;   &#x09;&#x09;println(&quot;   Methods:&quot;);&#x0A;   &#x09;&#x09;for(m : c.methods)&#x0A;      &#x09;&#x09;println(&quot;      &quot; .. m);&#x0A;   &#x09;&#x09;println(&quot;   Attributes:&quot;);&#x0A;   &#x09;&#x09;for(a : c.attributes)&#x0A;      &#x09;&#x09;println(&quot;      &quot; .. a);&#x0A;&#x09;}&#x0A;}&#x0A;&#x0A;/**&#x0A; * Get array with all nodes under root&#x0A; */&#x0A;function getAllNodes(root)&#x0A;{&#x0A;  nodes = %{};&#x0A;  for(object : root.children)&#x0A;  {&#x0A;    if (classof(object) == &quot;Node&quot;)&#x0A;    {&#x0A;      nodes[object.id] = object;&#x0A;    }&#x0A;    else if (classof(object) == &quot;Container&quot;)&#x0A;    {&#x0A;      for(n : GetAllNodes(object))&#x0A;      {&#x0A;        if (nodes[n.id] == null)&#x0A;          nodes[n.id] = n;&#x0A;      }&#x0A;    }&#x0A;  }&#x0A;  return nodes.values;&#x0A;}&#x0A;&#x0A;/**&#x0A; * Check if given node is a Windows node (node should have platform name set correctly)&#x0A; */&#x0A;function isWindows(object)&#x0A;{&#x0A;&#x09;return classof(object) == &quot;Node&quot; &amp;&amp; object.isAgent &amp;&amp; object.platformName like &quot;windows-*&quot;;&#x0A;}&#x0A;&#x0A;/**&#x0A; * Check if given node is a Linux node (node should have platform name set correctly)&#x0A; */&#x0A;function isLinux(object)&#x0A;{&#x0A;&#x09;return classof(object) == &quot;Node&quot; &amp;&amp; object.isAgent &amp;&amp; object.platformName like &quot;Linux-*&quot;;&#x0A;}&#x0A;&#x0A;/**&#x0A; * Get SNMP value by requirsting exact OID or by walking base OID and selecting correct instance&#x0A; */&#x0A;function SNMPGetOrWalk(transport, baseOID, instance) &#x0A;{&#x0A;&#x09;oid = baseOID .. &quot;.&quot; .. instance;&#x0A;&#x09;val = transport-&gt;getValue(oid);&#x0A;&#x09;if (val != null) return val;&#x0A;&#x09;vars = transport-&gt;walk(baseOID);&#x0A;&#x09;foreach(var: vars) &#x0A;&#x09;{&#x0A;&#x09;&#x09;if (var-&gt;name-&gt;right(instance-&gt;length) == instance) &#x0A;&#x09;&#x09;{&#x0A;&#x09;&#x09;&#x09;PollerTrace(&quot;[WARN] Firmware bug in device, fallen back to SNMP walk to get value of: &quot; . oid);&#x0A;&#x09;&#x09;&#x09;return var-&gt;value;&#x0A;&#x09;&#x09;}&#x0A;&#x09;}&#x0A;&#x09;return null;&#x0A;}</code>
		</script>
	</scripts>
	<objectTools>
	</objectTools>
	<dciSummaryTables>
	</dciSummaryTables>
	<actions>
	</actions>
	<webServiceDefinitions>
	</webServiceDefinitions>
	<assetManagementSchema>
	</assetManagementSchema>
</configuration>
